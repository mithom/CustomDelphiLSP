{
	"fileTypes": [
		"pas",
		"pp",
		"inc",
		"dpr",
		"dpk",
		"lpr",
		"lpk"
	],
	"keyEquivalent": "^~P",
	"name": "Pascal",
	"patterns": [
		{
			"match": "\\b(?i:(CLASS|FOR|IF|INTERFACE|NOT|OBJECT|UNTIL|WHILE|WITH))\\b",
			"name": "keyword.objectpascal"
		},
		{
			"match": "\\b(?<!\\.)(?i:(ABSOLUTE|ABSTRACT|div|mod|and|or|xor|shl|shr|is|as|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CDECL|CONST|CONSTREF|DEFAULT|DISPID|DISPINTERFACE|DO|DOWNTO|DYNAMIC|ELSE|END|EXCEPT|EXPORTS|EXTERNAL|FAR|FINALLY|FINALIZATION|FORWARD|GOTO|HELPER|IF|IMPLEMENTATION|IMPLEMENTS|IN|INDEX|INHERITED|INITIALIZATION|INLINE|INTERRUPT|LABEL|LIBRARY|MESSAGE|NEAR|OF|ON|OPERATOR|OUT|OVERLOAD|OVERRIDE|PACKED|PRIVATE|PROGRAM|PROPERTY|PROTECTED|PUBLIC|PUBLISHED|READ|RECORD|REFERENCE|REINTRODUCE|REPEAT|RESIDENT|RESOURCESTRING|SAFECALL|SET|STATIC|STDCALL|STRICT|THEN|TO|TRY|TYPE|UNIT|USES|VAR|VIRTUAL|WRITE))\\b(?![\\<\\/(])",
			"name": "keyword.objectpascal"
		},
		{
			"applyEndPatternLast": 1,
			"begin": "\\b(?i:(function|procedure|constructor|destructor))\\b[\\n\\r\\s]*",
			"captures": {
				"1": {
					"name": "keyword.objectpascal"
				}
			},
			"patterns": [
				{
					"match": "[\\s]*\\b(?i:(begin|of))\\b",
					"name": "keyword.objectpascal"
				},
				{
					"match": "[\\w]*[^\\s:;\\(\\{/]",
					"name": "entity.name.function.pascal"
				},
				{
					"match": "[:;]",
					"name": "source"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.objectpascal"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.objectpascal"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.objectpascal.two"
						}
					]
				},
				{
					"begin": "\\(\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.objectpascal"
						}
					},
					"end": "\\*\\)",
					"name": "comment.block.objectpascal.one"
				},
				{
					"begin": "\\{\\$",
					"captures": {
						"0": {
							"name": "string.objectpascal"
						}
					},
					"end": "\\}",
					"name": "string.objectpascal"
				},
				{
					"begin": "\\{",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.objectpascal"
						}
					},
					"end": "\\}",
					"name": "comment.block.objectpascal.two"
				}
			],
			"end": "[\\s:;\\(]"
		},
		{
			"match": "\\b(?<!\\.)(?i:(exit|continue|break|abort|halt))\\b",
			"name": "keyword.control"
		},
		{
			"match": "\\b(?<!\\.)(?i:(deprecated|experimental|platform))\\b",
			"name": "meta.selector"
		},
		{
			"match": "\\b(?<!\\.)(?i:(assert|raise|RunError))\\b",
			"name": "keyword.control"
		},
		{
			"match": "\\b(?i:(\\=|\\>|\\<|\\!|\\~|\\?|\\:|\\+|\\-|\\*|\\/|\\&|\\^|\\@|\\:\\=))\\b",
			"name": "keyword.operator.objectpascal"
		},
		{
			"match": "((\\$([0-9a-fA-F])*)|\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b)",
			"name": "constant.numeric.objectpascal"
		},
		{
			"match": "\\b(?i:(ansichar|ansistring|boolean|byte|cardinal|char|comp|currency|double|dword|extended|file|integer|int64|longint|longword|nativeint|nativeuint|olevariant|pansichar|pchar|pwidechar|pointer|real|shortint|shortstring|single|smallint|string|uint64|variant|widechar|widestring|word|wordbool))\\b",
			"name": "storage.type.token.java"
		},
		{
			"match": "\\b(?i:(true|false|nil))\\b",
			"name": "constant.numeric.objectpascal"
		},
		{
			"match": "\\b(?<!\\.)(?i:(self|result))\\b",
			"name": "variable.other"
		},
		{
			"begin": "(^[ \\t]+)?(?=--)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.objectpascal"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "--",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.objectpascal"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-dash.objectpascal.one"
				}
			]
		},
		{
			"begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.objectpascal"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.objectpascal"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-slash.objectpascal.two"
				}
			]
		},
		{
			"begin": "\\(\\*",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.objectpascal"
				}
			},
			"end": "\\*\\)",
			"name": "comment.block.objectpascal.one",
			"patterns":[
				{	
					"begin": "^(?=\\s*\\[\\w*(?:\\.\\w+)*])",
					"end": "\\s*(?=\\*\\))",
					"patterns": [
						{
							"include": "source.asqit"
						}
					],
					"name": "meta.embedded.block.asqit"
				}
			]
		},
		{
			"begin": "\\{\\$",
			"captures": {
				"0": {
					"name": "string.objectpascal"
				}
			},
			"end": "\\}",
			"name": "string.objectpascal"
		},
		{
			"begin": "\\{",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.objectpascal"
				}
			},
			"end": "\\}",
			"name": "comment.block.objectpascal.two"
		},
		{
			"applyEndPatternLast": 1,
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.objectpascal"
				}
			},
			"end": "(?i:('|\\n))",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.objectpascal"
				}
			},
			"name": "string.quoted.single.objectpascal",
			"patterns": [
				{
					"match": "''",
					"name": "constant.character.escape.apostrophe.objectpascal"
				}
			]
		}
	],
	"scopeName": "source.objectpascal",
	"uuid": "6A37D753-91CA-4612-8B3A-16B4905AD2C4"
}